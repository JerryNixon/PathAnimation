using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Linq;
using Windows.Foundation;
using Windows.UI;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Markup;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Shapes;
using CustomControls.Enums;
using CustomControls.ExtendedSegments;

namespace CustomControls.Controls
{
    [ContentProperty(Name = "Children")]
    public class LayoutPath : ContentControl
    {
        #region variables

        /// <summary>
        /// Contains information about potential blank space on the left and top of our path
        /// </summary>
        private Point _pathOffset = new Point(double.MaxValue, double.MaxValue);

        /// <summary>
        /// A grid containing all items that are animated along path
        /// </summary>
        private Grid CHILDREN;

        /// <summary>
        /// contains all segments added by initial analysis
        /// </summary>
        private List<ExtendedSegmentBase> _allSegments;

        /// <summary>
        /// Top level container for this control
        /// </summary>
        private Viewbox VIEW_BOX;

        /// <summary>
        /// The path object, generated by specified <see cref="Path"/> property
        /// </summary>
        private Path PATH;

        /// <summary>
        /// Children that will be animated along <see cref="Path"/>
        /// </summary>
        public IList<UIElement> Children => _children;
        private readonly ObservableCollection<UIElement> _children = new ObservableCollection<UIElement>();

        #endregion

        #region constructors

        protected override void OnApplyTemplate()
        {
            VIEW_BOX = GetTemplateChild(nameof(VIEW_BOX)) as Viewbox;
            PATH = GetTemplateChild(nameof(PATH)) as Path;
            CHILDREN = GetTemplateChild(nameof(CHILDREN)) as Grid;

            PATH.SetBinding(Windows.UI.Xaml.Shapes.Path.DataProperty, new Binding()
            {
                Path = new PropertyPath("Path"),
                Source = this
            });

            VIEW_BOX.SetBinding(Viewbox.StretchProperty, new Binding()
            {
                Path = new PropertyPath("Stretch"),
                Source = this
            });

            PATH.Opacity = PathVisible ? 0.5 : 0;

            foreach (var child in _children)
            {
                CHILDREN.Children.Add(WrapChild(child as FrameworkElement));
            }

            _children.CollectionChanged += delegate (object sender, NotifyCollectionChangedEventArgs args)
            {
                if (args.NewItems != null)
                {
                    foreach (var child in args.NewItems)
                    {
                        CHILDREN.Children.Insert(args.NewStartingIndex, WrapChild(child as FrameworkElement));
                    }
                }

                if (args.OldItems != null)
                {
                    foreach (var child in args.OldItems)
                    {
                        var wrapper = CHILDREN.Children.FirstOrDefault(x => GetWrapperChild(x) == child);
                        if (wrapper != null)
                            CHILDREN.Children.Remove(wrapper);
                    }
                }
            };

            base.OnApplyTemplate();
        }


        public LayoutPath()
        {
            DefaultStyleKey = typeof(LayoutPath);

            Loaded += delegate
            {


                AnalyzeSegments();

                TransformToProgress(Progress);
            };
        }

        static LayoutPath()
        {
            StretchProperty = DependencyProperty.Register(nameof(Stretch), typeof(Stretch), typeof(LayoutPath), new PropertyMetadata(Stretch.None));

            ProgressProperty = DependencyProperty.Register("Progress", typeof(double), typeof(LayoutPath), new PropertyMetadata(default(double),
                delegate (DependencyObject o, DependencyPropertyChangedEventArgs e)
                {
                    ((LayoutPath)o).TransformToProgress((double)e.NewValue);
                }));

            PathVisibleProperty = DependencyProperty.Register("PathVisible", typeof(bool), typeof(LayoutPath), new PropertyMetadata(true,
                delegate (DependencyObject o, DependencyPropertyChangedEventArgs e)
                {
                    var path = ((LayoutPath)o).PATH;
                    if (path != null)
                        path.Opacity = (bool)e.NewValue ? 0.5 : 0;
                }));

            PathProperty = DependencyProperty.Register(nameof(Path), typeof(Geometry), typeof(LayoutPath), new PropertyMetadata(default(Geometry)));

            CurrentPositionProperty = DependencyProperty.Register(nameof(CurrentPosition), typeof(Point), typeof(LayoutPath), new PropertyMetadata(false,
                delegate (DependencyObject o, DependencyPropertyChangedEventArgs e)
                {
                    ((LayoutPath)o).TransformToProgress(((LayoutPath)o).Progress);
                }));

            ItemsPaddingProperty = DependencyProperty.Register("ItemsPadding", typeof(double), typeof(LayoutPath), new PropertyMetadata(default(double),
                delegate (DependencyObject o, DependencyPropertyChangedEventArgs e)
                {
                    ((LayoutPath)o).TransformToProgress(((LayoutPath)o).Progress);
                }));

            OrientToPathProperty = DependencyProperty.Register("OrientToPath", typeof(bool), typeof(LayoutPath), new PropertyMetadata(default(bool),
                delegate (DependencyObject o, DependencyPropertyChangedEventArgs e)
                {
                    ((LayoutPath)o).TransformToProgress(((LayoutPath)o).Progress);
                }));

            ChildAlignmentProperty = DependencyProperty.Register("ChildAlignment", typeof(ChildAlignment), typeof(LayoutPath), new PropertyMetadata(ChildAlignment.Center,
                delegate (DependencyObject o, DependencyPropertyChangedEventArgs e)
                {
                    ((LayoutPath)o).TransformToProgress(((LayoutPath)o).Progress);
                }));

            PathLengthProperty = DependencyProperty.Register("PathLength", typeof(double), typeof(LayoutPath), new PropertyMetadata(default(double)));

            CurrentLengthProperty = DependencyProperty.Register("CurrentLength", typeof(double), typeof(LayoutPath), new PropertyMetadata(default(double)));

            CurrentRotationProperty = DependencyProperty.Register("CurrentRotation", typeof(double), typeof(LayoutPath), new PropertyMetadata(default(double)));

            RotateVerticallyProperty = DependencyProperty.Register("RotateVertically", typeof(bool), typeof(LayoutPath), new PropertyMetadata(default(bool),
                delegate (DependencyObject o, DependencyPropertyChangedEventArgs e)
                {
                    ((LayoutPath)o).TransformToProgress(((LayoutPath)o).Progress);
                }));
        }

        #endregion

        #region dependency properties

        /// <summary>
        /// Set the distance from the start, where <see cref="Children"/> will be transformed (value in Percent 0-100)
        /// </summary>
        public double Progress { get { return (double)GetValue(ProgressProperty); } set { SetValue(ProgressProperty, value); } }
        public static readonly DependencyProperty ProgressProperty;

        /// <summary>
        /// Describes how content is resized to fill its allocated space 
        /// </summary>
        public Stretch Stretch { get { return (Stretch)GetValue(StretchProperty); } set { SetValue(StretchProperty, value); } }
        public static readonly DependencyProperty StretchProperty;

        /// <summary>
        /// Sets the visibility of the <see cref="Path"/>
        /// </summary>
        public bool PathVisible { get { return (bool)GetValue(PathVisibleProperty); } set { SetValue(PathVisibleProperty, value); } }
        public static readonly DependencyProperty PathVisibleProperty;

        /// <summary>
        /// Set the geometry that it will be used for the translation of <see cref="Children"/>
        /// </summary>
        public Geometry Path { get { return (Geometry)GetValue(PathProperty); } set { SetValue(PathProperty, value); } }
        public static readonly DependencyProperty PathProperty;

        /// <summary>
        /// Set true if you want <see cref="Children"/> to rotate when moving along <see cref="Path"/>
        /// </summary>
        public bool OrientToPath { get { return (bool)GetValue(OrientToPathProperty); } set { SetValue(OrientToPathProperty, value); } }
        public static readonly DependencyProperty OrientToPathProperty;

        /// <summary>
        /// Sets the distance in percent of <see cref="PathLength"/> that items will have along <see cref="Path"/>
        /// </summary>
        public double ItemsPadding { get { return (double)GetValue(ItemsPaddingProperty); } set { SetValue(ItemsPaddingProperty, value); } }
        public static readonly DependencyProperty ItemsPaddingProperty;

        /// <summary>
        /// Total circumferential length of <see cref="Path"/>
        /// </summary>
        public double PathLength { get { return (double)GetValue(PathLengthProperty); } private set { SetValue(PathLengthProperty, value); } }
        public static readonly DependencyProperty PathLengthProperty;

        /// <summary>
        /// Gets the <see cref="Point"/> at the perimeter of <see cref="Path"/> on current <see cref="Progress"/>
        /// </summary>
        public Point CurrentPosition { get { return (Point)GetValue(CurrentPositionProperty); } private set { SetValue(CurrentPositionProperty, value); } }
        public static readonly DependencyProperty CurrentPositionProperty;

        /// <summary>
        /// Gets the length distance for <see cref="CurrentPosition"/>
        /// </summary>
        public double CurrentLength { get { return (double)GetValue(CurrentLengthProperty); } private set { SetValue(CurrentLengthProperty, value); } }
        public static readonly DependencyProperty CurrentLengthProperty;

        public bool RotateVertically { get { return (bool)GetValue(RotateVerticallyProperty); } set { SetValue(RotateVerticallyProperty, value); } }
        public static readonly DependencyProperty RotateVerticallyProperty;

        public ChildAlignment ChildAlignment { get { return (ChildAlignment)GetValue(ChildAlignmentProperty); } set { SetValue(ChildAlignmentProperty, value); } }
        public static readonly DependencyProperty ChildAlignmentProperty;

        public static readonly DependencyProperty CurrentRotationProperty;

        public double CurrentRotation { get { return (double)GetValue(CurrentRotationProperty); } private set { SetValue(CurrentRotationProperty, value); } }

        #endregion

        #region methods

        private ContentControl WrapChild(FrameworkElement child)
        {
            ContentControl wrapper = new ContentControl();
            wrapper.Content = child;
            wrapper.HorizontalAlignment = HorizontalAlignment.Left;
            wrapper.VerticalAlignment = VerticalAlignment.Top;
            wrapper.RenderTransform = new CompositeTransform();
            return wrapper;
        }

        private FrameworkElement GetWrapperChild(UIElement wrapper)
        {
            return (FrameworkElement)((ContentControl)wrapper).Content;
        }

        private void AnalyzeSegments()
        {
            _allSegments = new List<ExtendedSegmentBase>();
            var pg = (PathGeometry)Path;
            double pathLength = 0;

            foreach (var figure in pg.Figures)
            {
                var figureSegments = new List<ExtendedSegmentBase>();
                if (figure.IsClosed)
                    figure.Segments.Add(new LineSegment() { Point = figure.StartPoint });//close path by adding again startPoint
                for (int i = 0; i < figure.Segments.Count; i++)
                {
                    Point startPoint;
                    //determine start point of segment
                    startPoint = (i == 0 ? figure.StartPoint : figureSegments[i - 1].EndPoint);

                    if (figure.Segments[i] is LineSegment)
                        figureSegments.Add(new ExtendedLineSegment(figure.Segments[i], startPoint));
                    else if (figure.Segments[i] is BezierSegment)
                        figureSegments.Add(new ExtendedBezierSegment(figure.Segments[i], startPoint));
                    else if (figure.Segments[i] is QuadraticBezierSegment)
                        figureSegments.Add(new ExtendedQuadraticBezierSegment(figure.Segments[i], startPoint));
                    else if (figure.Segments[i] is ArcSegment)
                        figureSegments.Add(new ExtendedArcSegment(figure.Segments[i], startPoint));
                    else if (figure.Segments[i] is PolyLineSegment || figure.Segments[i] is PolyBezierSegment || figure.Segments[i] is PolyQuadraticBezierSegment)
                        figureSegments.Add(new ExtendedPolySegmentBase(figure.Segments[i], startPoint));
                }

                foreach (ExtendedSegmentBase t in figureSegments)
                {
                    t.DistanceFromStart = pathLength += t.SegmentLength;
                }

                _allSegments.AddRange(figureSegments);
            }

            for (int i = 0; i < _allSegments.Count; i++)
            {
                _allSegments[i].EndsAtPercent = _allSegments[i].DistanceFromStart / pathLength;
            }
            for (int i = 1; i < _allSegments.Count; i++)
            {
                _allSegments[i].StartsAtPercent = _allSegments[i - 1].EndsAtPercent;
            }

            foreach (var segment in _allSegments)
            {
                for (double i = 0; i < 1; i = i + 0.01)
                {
                    var point = segment.GetPointAt(i);
                    if (point.X < _pathOffset.X)
                        _pathOffset.X = point.X;
                    if (point.Y < _pathOffset.Y)
                        _pathOffset.Y = point.Y;
                }
            }

            PATH.Margin = new Thickness(-_pathOffset.X, -_pathOffset.Y, 0, 0);

            PathLength = pathLength;

        }

        private void GetPointAtFractionLength(double progress, out Point point, out double rotationTheta)
        {
            if (progress < 0)
                progress = 0;
            progress = (progress % 100) / 100.0;//make sure that 0 <= percent <= 1
                                                //get segment that falls on this percent
            var segment = _allSegments.First(c => c.EndsAtPercent >= progress);

            //find range of segment
            double range = segment.EndsAtPercent - segment.StartsAtPercent;
            progress = progress - segment.StartsAtPercent; //tranfer to 0
            progress = progress / range;//convert to local percent

            point = segment.GetPointAt(progress);//get point at percent for segment
            rotationTheta = segment.GetDegreesAt(progress);
        }

        private void TransformToProgress(double progress)
        {
            if (_allSegments == null)
                return;

            var children = CHILDREN.Children.ToArray();

            for (int i = 0; i < children.Count(); i++)
            {
                double childPercent = progress - (i * ItemsPadding);
                Point childPoint;
                double rotationTheta;
                GetPointAtFractionLength(childPercent, out childPoint, out rotationTheta);

                if (i == 0)
                    CurrentPosition = childPoint;

                var wrapper = (ContentControl)children[i];
                var wrappedChild = GetWrapperChild(wrapper);
                var childWidth = wrappedChild.ActualWidth;
                var childHeight = wrappedChild.ActualHeight;

                CompositeTransform wrapperTransform = (CompositeTransform)wrapper.RenderTransform;

                if (RotateVertically)
                    rotationTheta += 90;

                if (OrientToPath)
                {
                    if (i == 0)
                        CurrentRotation = rotationTheta;
                    wrapperTransform.Rotation = rotationTheta;
                }
                else
                {
                    CurrentRotation = wrapperTransform.Rotation = 0;
                }

                double translateX = childPoint.X - _pathOffset.X;
                double translateY = childPoint.Y - _pathOffset.Y;

                //center align child
                translateX -= childWidth / 2.0;
                translateY -= childHeight / 2.0;
                wrapperTransform.CenterX = childWidth / 2.0;
                wrapperTransform.CenterY = childHeight / 2.0;

                wrapperTransform.TranslateX = translateX;
                wrapperTransform.TranslateY = translateY;

            }

            if (!children.Any())
            {
                Point childPoint;
                double rotationTheta;
                GetPointAtFractionLength(progress, out childPoint, out rotationTheta);
                CurrentPosition = childPoint;
                CurrentRotation = rotationTheta;
            }

            var p = progress / 100.0;
            CurrentLength = PathLength * p;
        }

        #endregion

    }
}
